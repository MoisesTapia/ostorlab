"""Report vulnerability Mixin.

Definition of the main methods to process an entry from the KB - Knowledge Base,
and emit a vulnerability message.
"""
from ostorlab.agent import agent
from ostorlab.agent.kb import kb as knowledge_base


class AgentReportVulnMixin(agent.Agent):
    """Report Vulnerability class implementing logic of fetching entries from the knowledge base,
    and emitting vulnerability messages."""

    def send_vulnerability_message(self,
                                   entry: knowledge_base.Entry,
                                   technical_detail: str,
                                   risk_rating: str,
                                   dna: str) -> None:
        """Fetch the details of an entry from the knowledge base, and emit a vulnerability message.
        Args:
            entry: knowledge base entry.
            technical_detail: markdown of the scan results.
            risk_rating: the risk rating assigned to the result of the scan.
            dna: ??
        Returns:
            None
        """
        title = entry.title
        short_description = entry.short_description
        description = entry.description
        recommendation = entry.recommendation
        security_issue = entry.security_issue
        privacy_issue = entry.privacy_issue
        has_public_exploit = entry.has_public_exploit
        targeted_by_malware = entry.targeted_by_malware
        targeted_by_ransomware = entry.targeted_by_ransomware
        targeted_by_nation_state = entry.targeted_by_nation_state

        references = entry.references
        references=[]
        for key, value in entry.references.items():
            reference = {}
            reference['title'] = key
            reference['url'] = value
            references.append(reference)

        data = {
            'title': title,
            'technical_detail': technical_detail,
            'risk_rating': risk_rating,
            'short_description': short_description,
            'description': description,
            'recommendation': recommendation,
            'references': references,
            'security_issue': security_issue,
            'privacy_issue': privacy_issue,
            'has_public_exploit': has_public_exploit,
            'targeted_by_malware': targeted_by_malware,
            'targeted_by_ransomware': targeted_by_ransomware,
            'targeted_by_nation_state': targeted_by_nation_state,
            'dna': dna
        }
        selector='v3.report.vulnerability'
        self.emit(selector, data)
